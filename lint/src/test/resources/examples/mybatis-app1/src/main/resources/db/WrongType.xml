<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="db.WrongType">

    <insert id="InsertStatement1" parameterType="model.Author"
            useGeneratedKeys="true"
            keyProperty="id">
        insert Author(name)
        values (#{name})
    </insert>
    <insert id="WrongInsertStatement1" parameterType="model.Author"
            useGeneratedKeys="true"
            keyProperty="id">
        insert Author(name)
        values (#{id})
    </insert>

    <insert id="InsertSelectStatement1" parameterType="model.Author"
            useGeneratedKeys="true"
            keyProperty="id">
        insert Author(name)
        select name
        from Author
        where name = 'like'
    </insert>
    <insert id="WrongInsertSelectStatement1" parameterType="model.Content"
            useGeneratedKeys="true"
            keyProperty="id">
        insert Author(name)
        select name
        from Author
        where name = #{author.id}
    </insert>


    <select id="SelectJoinStatement" parameterType="int" resultMap="blogResult">
        select B.id as id, B.blog_name as blog_name,
        B.description,
        B.create_time as create_time,
        A.id as author_id,
        A.name as author_name,
        C.id as content_id,
        C.blog_id as content_blog_id,
        C.content as content_content,
        C.create_time as content_create_time,
        A.id as content_author_id,
        A.name as content_author_name
        from Blog as B
        left join Author as A on B.author_id = A.id
        left join Content as C on B.id = C.blog_id
        where B.author_id = '?' + #{id}
    </select>

    <select id="WrongSelectStatement1" parameterType="Content" resultMap="blogResult">
        select B.id as id, B.blog_name as blog_name,
        B.description,
        B.create_time as create_time,
        A.id as author_id,
        A.name as author_name,
        C.id as content_id,
        C.blog_id as content_blog_id,
        C.content as content_content,
        C.create_time as content_create_time,
        A.id as content_author_id,
        A.name as content_author_name
        from Blog as B
        left join Author as A on B.author_id = #{createTime}
        left join Content as C on B.id = C.blog_id
        where B.author_id = #{author.name}
    </select>

    <select id="SelectUnionStatement1" parameterType="int" resultMap="blogResult">
        select B.id as id, B.blog_name as blog_name,
        B.description,
        B.create_time as create_time,
        A.id as author_id,
        A.name as author_name,
        C.id as content_id,
        C.blog_id as content_blog_id,
        C.content as content_content,
        C.create_time as content_create_time,
        A.id as content_author_id,
        A.name as content_author_name
        from Blog as B
        where B.author_id = '?' + #{id}
        UNION ALL
        select B.id as id, B.blog_name as blog_name,
        B.description,
        B.create_time as create_time,
        A.id as author_id,
        A.name as author_name,
        C.id as content_id,
        C.blog_id as content_blog_id,
        C.content as content_content,
        C.create_time as content_create_time,
        A.id as content_author_id,
        A.name as content_author_name
        from Blog as B
        where B.author_id = '?' + #{id}
    </select>

    <select id="WrongSelectUnionStatement1" parameterType="map" resultMap="blogResult">
        select B.id as id, B.blog_name as blog_name,
        B.description,
        B.create_time as create_time,
        A.id as author_id,
        A.name as author_name,
        C.id as content_id,
        C.blog_id as content_blog_id,
        C.content as content_content,
        C.create_time as content_create_time,
        A.id as content_author_id,
        A.name as content_author_name
        from Blog as B
        where B.author_id = #{id}
        UNION ALL
        select B.id as id, B.blog_name as blog_name,
        B.description,
        B.create_time as create_time,
        A.id as author_id,
        A.name as author_name,
        C.id as content_id,
        C.blog_id as content_blog_id,
        C.content as content_content,
        C.create_time as content_create_time,
        A.id as content_author_id,
        A.name as content_author_name
        from Blog as B
        where B.author_id = #{id}
    </select>

    <select id="SelectIntoStatement1" parameterType="int" resultMap="blogResult">
        select B.* INTO Blog_Backup
        from Blog as B
        where B.author_id = #{id}
    </select>

    <select id="WrongSelectIntoStatement1" parameterType="Blog" resultMap="blogResult">
        select B.* INTO Blog_Backup
        from Blog as B
        where B.author_id = #{blogName}
    </select>

    <update id="updateContent1" parameterType="model.Content">
        update Content set content = #{content}
        where id = #{id}
    </update>

    <update id="wrongUpdateContent1" parameterType="boolean">
        update Content set content = ''
        where id = #{true_false}
    </update>

    <update id="wrongUpdateContent2" parameterType="model.Content">
        update Content set content = #{createTime}
        where id = #{id}
    </update>

    <delete id="deleteContent" parameterType="int">
        delete from Content
        where id = #{id}
    </delete>

    <delete id="wrongDeleteContent1" parameterType="string">
        delete from Content
        where id = #{myName}
    </delete>

    <!--    -->


    <insert id="insert1" parameterType="model.Author"
            useGeneratedKeys="true"
            keyProperty="id">
        insert into Author(name)
        values (#{name})
    </insert>
    <insert id="insert2" parameterType="model.Author"
            useGeneratedKeys="true"
            keyProperty="id">
        insert into Author(name, id)
        values (#{id}, #{id})
    </insert>

    <select id="select1" parameterType="int" resultMap="blogResult">
        select B.id as id, B.blog_name as blog_name,
        B.description,
        B.create_time as create_time,
        A.id as author_id,
        A.name as author_name,
        C.id as content_id,
        C.blog_id as content_blog_id,
        C.content as content_content,
        C.create_time as content_create_time,
        A.id as content_author_id,
        A.name as content_author_name
        from Blog as B
        left join Author as A on B.author_id = A.id
        left join Content as C on B.id = C.blog_id
        where B.author_id = #{id}
    </select>

    <select id="select2" parameterType="string" resultMap="blogResult">
        select B.id as id, B.blog_name as blog_name,
        B.description,
        B.create_time as create_time,
        A.id as author_id,
        A.name as author_name,
        C.id as content_id,
        C.blog_id as content_blog_id,
        C.content as content_content,
        C.create_time as content_create_time,
        A.id as content_author_id,
        A.name as content_author_name
        from Blog as B
        left join Author as A on B.author_id = A.id
        left join Content as C on B.id = C.blog_id
        where B.author_id = #{authorIdLiteral}
    </select>

    <select id="select3" parameterType="model.Author" resultMap="blogResult">
        select B.id as id, B.blog_name as blog_name,
        B.description,
        B.create_time as create_time,
        A.id as author_id,
        A.name as author_name,
        C.id as content_id,
        C.blog_id as content_blog_id,
        C.content as content_content,
        C.create_time as content_create_time,
        A.id as content_author_id,
        A.name as content_author_name
        from Blog as B
        left join Author as A on B.author_id = A.id
        left join Content as C on B.id = C.blog_id
        where B.author_id = #{name}
    </select>

    <delete id="delete1" parameterType="model.Content">
        delete from Content
        where id = #{id}
    </delete>

    <delete id="delete2" parameterType="model.Content">
        delete from Content
        where id = #{createTime}
    </delete>

    <delete id="delete3" parameterType="model.Content">
        delete from Content
        where id = #{createTime}
        OR #{author.id} = content
    </delete>

    <update id="update1" parameterType="model.Content">
        update Content set content = #{content}
        where id = #{id}
    </update>

    <update id="update2" parameterType="model.Content">
        update Content set content = #{id},
                            id = #{content}
        where id = #{createTime}
    </update>

<!--    -->
<!--    <insert id="insertBlog" parameterType="model.Blog" useGeneratedKeys="true"-->
<!--            keyProperty="id">-->
<!--        insert into Blog (author_id, blog_name, description, create_time)-->
<!--        values (#{author.id}-->
<!--        , #{blogName}-->
<!--        , #{description}-->
<!--        , #{createTime})-->
<!--    </insert>-->

<!--    <select id="selectAuthor" resultType="model.Author">-->
<!--        select id, name from Author-->

<!--    </select>-->
<!--    <select id="selectBlog" resultMap="blogResult">-->
<!--        select B.id as id, B.blog_name as blog_name,-->
<!--        B.description,-->
<!--        B.create_time as create_time,-->
<!--        A.id as author_id,-->
<!--        A.name as author_name,-->
<!--        C.id as content_id,-->
<!--        C.content as content_content,-->
<!--        C.create_time as content_create_time-->
<!--        from Blog as B-->
<!--        left join Author as A on B.author_id = A.id-->
<!--        left join Content as C on B.id = C.blog_id-->
<!--    </select>-->

<!--    <select id="selectBlogByAuthor" parameterType="int" resultMap="blogResult">-->
<!--        select B.id as id, B.blog_name as blog_name,-->
<!--        B.description,-->
<!--        B.create_time as create_time,-->
<!--        A.id as author_id,-->
<!--        A.name as author_name,-->
<!--        C.id as content_id,-->
<!--        C.blog_id as content_blog_id,-->
<!--        C.content as content_content,-->
<!--        C.create_time as content_create_time,-->
<!--        A.id as content_author_id,-->
<!--        A.name as content_author_name-->
<!--        from Blog as B-->
<!--        left join Author as A on B.author_id = A.id-->
<!--        left join Content as C on B.id = C.blog_id-->
<!--        where B.author_id = #{id}-->
<!--    </select>-->

<!--    <select id="selectContentByBlog" parameterType="int" resultMap="contentResult">-->
<!--        select C.id as id,-->
<!--        C.blog_id,-->
<!--        C.content,-->
<!--        C.create_time,-->
<!--        A.id as author_id,-->
<!--        A.name as author_name-->
<!--        from Content as C-->
<!--        left join Author as A on C.author_id = A.id-->
<!--        where C.blog_id = #{id}-->
<!--    </select>-->

<!--    <insert id="insertContent" parameterType="model.Content"-->
<!--            useGeneratedKeys="true"-->
<!--            keyProperty="id">-->
<!--        insert into Content (author_id, blog_id,-->
<!--        content, create_time)-->
<!--        values (#{author.id}, #{blogId}, #{content}, #{createTime})-->
<!--    </insert>-->
<!--    <delete id="deleteContent" parameterType="int">-->
<!--        delete from Content-->
<!--        where id = #{id}-->
<!--    </delete>-->
<!--    <update id="updateContent" parameterType="model.Content">-->
<!--        update Content set content = #{content}-->
<!--        where id = #{id}-->
<!--    </update>-->

<!--    <resultMap id="authorResult" type="model.Author">-->
<!--        <id property="id" column="id"/>-->
<!--        <result property="name" column="name"/>-->
<!--    </resultMap>-->

<!--    <resultMap id="blogResult" type="model.Blog">-->
<!--        <id property="id" column="id"/>-->
<!--        <result property="blogName" column="blog_name"/>-->
<!--        <result property="description" column="description"/>-->
<!--        <result property="createTime" column="create_time"/>-->
<!--        <association property="author" resultMap="authorResult" columnPrefix="author_"/>-->
<!--        <collection property="contents" resultMap="contentResult" columnPrefix="content_"/>-->
<!--    </resultMap>-->

<!--    <resultMap id="contentResult" type="model.Content">-->
<!--        <id property="id" column="id"/>-->
<!--        <result property="content" column="content"/>-->
<!--        <result property="blogId" column="blog_id"/>-->
<!--        <result property="createTime" column="create_time"/>-->
<!--        <association property="author" resultMap="authorResult" columnPrefix="author_"/>-->
<!--    </resultMap>-->

<!--    <update id="prepared">-->
<!--        insert into Author(name)-->
<!--        values (?) {1: STRINGDECODE('\ucc3d\uc6d0')}-->
<!--    </update>-->
    <update id="createTableIfNotExist">
        DROP TABLE IF EXISTS Author;
        CREATE TABLE Author (
        id int NOT NULL AUTO_INCREMENT,
        name varchar(100) NOT NULL
        );
        ALTER TABLE Author ADD PRIMARY KEY (id);

        DROP TABLE IF EXISTS Blog;
        CREATE TABLE Blog (
        id int NOT NULL AUTO_INCREMENT,
        author_id int NOT NULL,
        blog_name varchar(100) NOT NULL,
        description varchar(100) NOT NULL,
        create_time datetime NOT NULL
        );
        ALTER TABLE Blog ADD PRIMARY KEY (id);
        ALTER TABLE Blog ADD FOREIGN KEY (author_id) REFERENCES Author(id);


        DROP TABLE IF EXISTS Content;
        CREATE TABLE Content (
        id int NOT NULL AUTO_INCREMENT,
        author_id int NOT NULL,
        blog_id int NOT NULL,
        content varchar(100) NOT NULL,
        create_time datetime NOT NULL
        );
        ALTER TABLE Content ADD PRIMARY KEY (id);
        ALTER TABLE Content ADD FOREIGN KEY (blog_id) REFERENCES Blog(id);
        ALTER TABLE Content ADD FOREIGN KEY (author_id) REFERENCES Author(id);
    </update>
    <update id="createTableIfNotExistSQLite">
        DROP TABLE IF EXISTS Author;
        CREATE TABLE Author (
        id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
        name varchar(100) NOT NULL
        );

        DROP TABLE IF EXISTS Blog;
        CREATE TABLE Blog (
        id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
        author_id INTEGER NOT NULL,
        blog_name varchar(100) NOT NULL,
        description varchar(100) NOT NULL,
        create_time datetime NOT NULL,
        FOREIGN KEY (author_id)
        REFERENCES Author (id)
        );


        DROP TABLE IF EXISTS Content;
        CREATE TABLE Content (
        id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
        author_id INTEGER NOT NULL,
        blog_id int NOT NULL,
        content varchar(100) NOT NULL,
        create_time datetime NOT NULL,
        FOREIGN KEY (blog_id)
        REFERENCES Blog (id),
        FOREIGN KEY (author_id)
        REFERENCES Author (id)
        );
    </update>
</mapper>