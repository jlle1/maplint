<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="db.WrongPropertyName">
    <insert id="form" parameterType="model.Author"
            useGeneratedKeys="true"
            keyProperty="id">
        insert into Author(name, id)
        values (#{name}, #{id})
    </insert>

    <insert id="form1" parameterType="model.Author"
            useGeneratedKeys="true"
            keyProperty="id">
        insert into Author(name, id)
        values (#{name1}, #{id1})
    </insert>

    <insert id="form2" parameterType="string"
            useGeneratedKeys="true"
            keyProperty="id">
        insert into Author(name)
        values (#{aa})
    </insert>

    <insert id="form3"
            useGeneratedKeys="true"
            keyProperty="id">
        insert into Author(name)
        values (#{aa})
    </insert>

    <insert id="form4" parameterType="_boolean"
            useGeneratedKeys="true"
            keyProperty="id">
        insert into Author(name)
        values (#{aa})
    </insert>

    <insert id="form5" parameterType="map"
            useGeneratedKeys="true"
            keyProperty="id">
        insert into Author(name)
        values (#{aa})
    </insert>

    <insert id="form6" parameterType="date[]"
            useGeneratedKeys="true"
            keyProperty="id">
        insert into Author(name)
        values (#{aa})
    </insert>

    <insert id="form7" parameterType="object"
            useGeneratedKeys="true"
            keyProperty="id">
        insert into Author(name)
        values (#{aa})
    </insert>

    <insert id="form8" parameterType="decimal"
            useGeneratedKeys="true"
            keyProperty="id">
        insert into Author(name)
        values (#{aabb})
    </insert>

    <insert id="insert1" parameterType="model.Author"
            useGeneratedKeys="true"
            keyProperty="id">
        insert into Author(name, id)
        values (#{name1}, #{id1})
    </insert>

    <select id="select1" parameterType="int" resultMap="blogResult">
        select B.id as id, B.blog_name as blog_name,
        B.description,
        B.create_time as create_time,
        A.id as author_id,
        A.name as author_name,
        C.id as content_id,
        C.blog_id as content_blog_id,
        C.content as content_content,
        C.create_time as content_create_time,
        A.id as content_author_id,
        A.name as content_author_name
        from Blog as B
        left join Author as A on B.author_id = A.id
        left join Content as C on B.id = C.blog_id
        where B.author_id = #{id}
    </select>

    <select id="select2" parameterType="model.Content" resultMap="blogResult">
        select B.id as id, B.blog_name as blog_name,
        B.description,
        B.create_time as create_time,
        A.id as author_id,
        A.name as author_name,
        C.id as content_id,
        C.blog_id as content_blog_id,
        C.content as content_content,
        C.create_time as content_create_time,
        A.id as content_author_id,
        A.name as content_author_name
        from Blog as B
        left join Author as A on B.author_id = A.id
        left join Content as C on B.id = C.blog_id
        where B.author_id = #{id}
        where C.blogId = #{blogId}
        where C.content = #{content}
    </select>

    <select id="select3" parameterType="model.Content" resultMap="blogResult">
        select B.id as id, B.blog_name as blog_name,
        B.description,
        B.create_time as create_time,
        A.id as author_id,
        A.name as author_name,
        C.id as content_id,
        C.blog_id as content_blog_id,
        C.content as content_content,
        C.create_time as content_create_time,
        A.id as content_author_id,
        A.name as content_author_name
        from Blog as B
        left join Author as A on B.author_id = A.id
        left join Content as C on B.id = C.blog_id
        where B.author_id = #{id2}
        where C.blogId = #{blogId2}
        where C.content = #{content2}
    </select>

    <select id="select4" parameterType="model.Content" resultMap="blogResult">
        select B.id as id, B.blog_name as blog_name,
        B.description,
        B.create_time as create_time,
        A.id as author_id,
        A.name as author_name,
        C.id as content_id,
        C.blog_id as content_blog_id,
        C.content as content_content,
        C.create_time as content_create_time,
        A.id as content_author_id,
        A.name as content_author_name
        from Blog as B
        left join Author as A on B.author_id = A.id
        left join Content as C on B.id = C.blog_id
        where B.author_id = #{iD}
        where C.blogId = #{blogID}
        where C.content = #{coNtent}
    </select>

    <delete id="delete1" parameterType="model.Content">
        delete from Content
        where id = #{id}
    </delete>

    <delete id="delete2" parameterType="model.Content">
        delete from Content
        where id = #{id2}
    </delete>

    <update id="update1" parameterType="model.Blog">
        update Content set content = #{blogName}
        where id = #{createTime}
    </update>

    <update id="update2" parameterType="model.Blog">
        update Content set content = #{description1}
        where id = #{id2}
    </update>

    <resultMap id="authorResult" type="model.Author">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
    </resultMap>

    <resultMap id="blogResult" type="model.Blog">
        <id property="id" column="id"/>
        <result property="blogName" column="blog_name"/>
        <result property="description" column="description"/>
        <result property="createTime" column="create_time"/>
        <association property="author" resultMap="authorResult" columnPrefix="author_"/>
        <collection property="contents" resultMap="contentResult" columnPrefix="content_"/>
    </resultMap>

    <resultMap id="contentResult" type="model.Content">
        <id property="id" column="id"/>
        <result property="content" column="content"/>
        <result property="blogId" column="blog_id"/>
        <result property="createTime" column="create_time"/>
        <association property="author" resultMap="authorResult" columnPrefix="author_"/>
    </resultMap>

    <update id="prepared">
        insert into Author(name)
        values (?) {1: STRINGDECODE('\ucc3d\uc6d0')}
    </update>
    <update id="createTableIfNotExist">
        DROP TABLE IF EXISTS Author;
        CREATE TABLE Author (
        id int NOT NULL AUTO_INCREMENT,
        name varchar(100) NOT NULL
        );
        ALTER TABLE Author ADD PRIMARY KEY (id);

        DROP TABLE IF EXISTS Blog;
        CREATE TABLE Blog (
        id int NOT NULL AUTO_INCREMENT,
        author_id int NOT NULL,
        blog_name varchar(100) NOT NULL,
        description varchar(100) NOT NULL,
        create_time datetime NOT NULL
        );
        ALTER TABLE Blog ADD PRIMARY KEY (id);
        ALTER TABLE Blog ADD FOREIGN KEY (author_id) REFERENCES Author(id);


        DROP TABLE IF EXISTS Content;
        CREATE TABLE Content (
        id int NOT NULL AUTO_INCREMENT,
        author_id int NOT NULL,
        blog_id int NOT NULL,
        content varchar(100) NOT NULL,
        create_time datetime NOT NULL
        );
        ALTER TABLE Content ADD PRIMARY KEY (id);
        ALTER TABLE Content ADD FOREIGN KEY (blog_id) REFERENCES Blog(id);
        ALTER TABLE Content ADD FOREIGN KEY (author_id) REFERENCES Author(id);
    </update>
    <update id="createTableIfNotExistSQLite">
        DROP TABLE IF EXISTS Author;
        CREATE TABLE Author (
        id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
        name varchar(100) NOT NULL
        );

        DROP TABLE IF EXISTS Blog;
        CREATE TABLE Blog (
        id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
        author_id INTEGER NOT NULL,
        blog_name varchar(100) NOT NULL,
        description varchar(100) NOT NULL,
        create_time datetime NOT NULL,
        FOREIGN KEY (author_id)
        REFERENCES Author (id)
        );


        DROP TABLE IF EXISTS Content;
        CREATE TABLE Content (
        id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
        author_id INTEGER NOT NULL,
        blog_id int NOT NULL,
        content varchar(100) NOT NULL,
        create_time datetime NOT NULL,
        FOREIGN KEY (blog_id)
        REFERENCES Blog (id),
        FOREIGN KEY (author_id)
        REFERENCES Author (id)
        );
    </update>
</mapper>